# Generated by Django 5.1 on 2024-10-01 05:57

import django.contrib.auth.models
import django.core.validators
import django.db.models.deletion
import queryraiserapp.models
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('queryraiserapp', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Department',
            fields=[
                ('department_code', models.AutoField(primary_key=True, serialize=False)),
                ('department_name', models.CharField(max_length=250)),
                ('department_logo', models.ImageField(blank=True, null=True, upload_to='department_logo/')),
            ],
        ),
        migrations.CreateModel(
            name='FailedLoginAttempts',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('device_id', models.CharField(max_length=255, unique=True)),
                ('attempts', models.PositiveBigIntegerField(default=0)),
                ('is_active', models.BooleanField(default=False)),
                ('is_deleted', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='Technician',
            fields=[
                ('user_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('technician_name', models.CharField(max_length=100)),
                ('technician_number', queryraiserapp.models.PhoneNumberField(max_length=13, region='IN')),
            ],
            bases=('queryraiserapp.user',),
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='TechnicianField',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('field_name', models.CharField(max_length=100, null=True, unique=True)),
            ],
        ),
        migrations.AddField(
            model_name='faculty',
            name='faculty_phonenumber',
            field=queryraiserapp.models.PhoneNumberField(max_length=13, null=True, region='IN'),
        ),
        migrations.AlterField(
            model_name='user',
            name='role',
            field=models.CharField(choices=[('technician', 'Technician'), ('faculty', 'Faculty'), ('admin', 'Admin')], max_length=10),
        ),
        migrations.CreateModel(
            name='Complaint',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('priority', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High')], default='medium', max_length=10)),
                ('status', models.CharField(choices=[('new', 'New'), ('assigned', 'Assigned'), ('resolved', 'Resolved'), ('pending_review', 'Pending Review'), ('pending', 'Pending'), ('closed', 'Closed'), ('reopened', 'Reopened')], default='new', max_length=20)),
                ('technician_status', models.CharField(blank=True, choices=[('resolved', 'Resolved'), ('pending', 'Pending')], max_length=20, null=True)),
                ('faculty_status', models.CharField(blank=True, choices=[('resolved', 'Resolved'), ('pending', 'Pending')], max_length=20, null=True)),
                ('technician_comments', models.TextField(blank=True, help_text='Comments from the technician (both pending and resolved)', null=True)),
                ('faculty_comments', models.TextField(blank=True, help_text='Comments from the faculty (both pending and resolved)', null=True)),
                ('technician_resolve_time', models.DateTimeField(blank=True, null=True)),
                ('faculty_feedback_time', models.DateTimeField(blank=True, null=True)),
                ('rating', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('assigned_time', models.DateTimeField(blank=True, null=True)),
                ('closed_time', models.DateTimeField(blank=True, null=True)),
                ('reopen_count', models.IntegerField(default=0)),
                ('faculty', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='queryraiserapp.faculty')),
                ('department', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='queryraiserapp.department')),
                ('technician', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='queryraiserapp.technician')),
            ],
        ),
        migrations.AlterField(
            model_name='faculty',
            name='department',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='queryraiserapp.department'),
        ),
        migrations.CreateModel(
            name='ReopenHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reason', models.TextField()),
                ('reopen_time', models.DateTimeField(auto_now_add=True)),
                ('complaint', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reopen_history', to='queryraiserapp.complaint')),
            ],
        ),
        migrations.AddField(
            model_name='technician',
            name='technician_field',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='queryraiserapp.technicianfield'),
        ),
        migrations.DeleteModel(
            name='Departments',
        ),
        migrations.AlterUniqueTogether(
            name='technician',
            unique_together={('technician_number', 'technician_field')},
        ),
    ]
